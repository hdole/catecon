doctype html
html(lang="en")
	head
		meta(charset="utf-8")
		meta(name="viewport", content="width=device-width, initial-scale=1")
		meta(name="description", content="Catecon: The categorical console for category theory")
		link(rel="stylesheet", type="text/css", href="/ss/catecon.css")
		link(rel="preconnect", href="https://api-cdn.amazon.com")
		link(rel="preconnect", href="https://https://cognito-identity.us-west-2.amazonaws.com")
		title Catecon
	body
		include ../public/svg/icons.svg
		#catalog.catalogTop.hidden
		#navbar
		#help-sidenav.sidenavPnl.sidenavLeftPnl
		#settings-sidenav.sidenavPnl.sidenavLeftPnl
		#login-sidenav.sidenavPnl.sidenavLeftPnl
		#tty-sidenav.sidenavPnl.sidenavLeftPnl
		#threeD-sidenav.sidenavPnl.sidenavLeftPnl
		#diagramView.svg
			#toolbar.hidden
				#toolbar-header
				#toolbar-error.hidden.error
				#toolbar-help
			svg#topSVG(xmlns="http://www.w3.org/2000/svg", style="background:var(--color-bg)")
				defs
					filter#softGlow(height="300%", width="300%")
						feMorphology(operator="dilate", radius="2", in="SourceAlpha", result="thicken")
						feGaussianBlur(in="thicken", stdDeviation="2", result="blurred")
						feFlood(flood-color="rgb(192,192,192)", result="glowColor")
						feComposite(in="glowColor", in2="blurred", operator="in", result="softGlow_colored")
						feMerge
							feMergeNode(in="softGlow_colored")
							feMergeNode(in="SourceGraphic")
					filter#diagramGlow(height="300%", width="300%")
						feMorphology(operator="dilate", radius="4", in="SourceAlpha", result="thicken")
						feGaussianBlur(in="thicken", stdDeviation="5", result="blurred")
						feFlood(flood-color="rgb(0,255,0)", result="glowColor")
						feComposite(in="glowColor", in2="blurred", operator="in", result="diagramGlow_colored")
						feMerge
							feMergeNode(in="diagramGlow_colored")
							feMergeNode(in="SourceGraphic")
					g#threeD_base
						line.arrow0(x1="120", y1="180", x2="280", y2="180", marker-end="url(#arrowhead)")
						line.arrow0(x1="120", y1="180", x2="120", y2="40", marker-end="url(#arrowhead)")
						line.arrow0(x1="120", y1="180", x2="40", y2="280", marker-end="url(#arrowhead)")
					filter#diagramShadow
						feDropShadow(dx="6", dy="6", stdDeviation="0.2", flood-color="#bbbb")
					filter#defaultGlow
						feDropShadow(dx="4", dy="4", stdDeviation="0.2", flood-color="#bb0b")
					linearGradient#borderBotGrad(x1="0", y1="0", x2="0", y2="1")
						stop(offset="0%", stop-color="white")
						stop(offset="100%", stop-color="black")
					linearGradient#borderTopGrad(x1="0", y1="0", x2="0", y2="1")
						stop(offset="0%", stop-color="black")
						stop(offset="100%", stop-color="white")
					linearGradient#borderLftGrad
						stop(offset="0%", stop-color="black")
						stop(offset="100%", stop-color="white")
					linearGradient#borderRgtGrad
						stop(offset="0%", stop-color="white")
						stop(offset="100%", stop-color="black")
					linearGradient#borderBotGradDM(x1="0", y1="0", x2="0", y2="1")
						stop(offset="0%", stop-color="black")
						stop(offset="100%", stop-color="white")
					linearGradient#borderTopGradDM(x1="0", y1="0", x2="0", y2="1")
						stop(offset="0%", stop-color="white")
						stop(offset="100%", stop-color="black")
					linearGradient#borderLftGradDM
						stop(offset="0%", stop-color="white")
						stop(offset="100%", stop-color="black")
					linearGradient#borderRgtGradDM
						stop(offset="0%", stop-color="black")
						stop(offset="100%", stop-color="white")
				g#diagramSVG.trans
		svg#uiSVG(xmlns="http://www.w3.org/2000/svg")
		#statusbar.hidden
		script#vertexShader(type="x-shader/x-vertex")
			|varying vec3 vWorldPosition;
			|void main()
			|{
			|	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
			|	vWorldPosition = worldPosition.xyz;
			|	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			|}
		script#fragmentShader(type="x-shader/x-fragment")
			|uniform vec3 topColor;
			|uniform vec3 bottomColor;
			|uniform float offset;
			|uniform float exponent;
			|varying vec3 vWorldPosition;
			|void main()
			|{
			|	float h = normalize( vWorldPosition + offset ).y;
			|	gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h , 0.0), exponent ), 0.0 ) ), 1.0 );
			|}
		script(type="text/javascript", src="/js/sjcl.js")
		script(type="text/javascript", src="/js/sha256.js")
		script(type="text/javascript", src="/js/H3.js")
		script(type="text/javascript", src="/js/D2.js")
		script(type="text/javascript", src="https://sdk.amazonaws.com/js/aws-sdk-2.306.0.min.js")
		script(type="text/javascript", src="/js/amazon-cognito-identity.min.js")
		script(type="text/javascript", src="/js/Cat.js")
		script(type="text/javascript", src="/js/HTML.js")
