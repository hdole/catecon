#!/usr/bin/env node
// (C) 2018 Harry Dole
// Catecon:  The Categorical Console
//
const AWS = require('aws-sdk');
const fs = require('fs');
const proc = require('child_process');

AWS.config.loadFromPath('/home/hdole/.aws/config.json');

const bldFilename = '.build.json';
const tsFilename = '.timestamps.json';

let lambda = new AWS.Lambda();

function uploadLambda(info)
{
	const copyDeps = info.dependencies.map(d => `cp -p ${d} $wd`).join(';\n');
	const f = info.file;
	const n = info.name;
	const script =
`
wd=\`mktemp -d CAT.XXXXXX\`;
${copyDeps}
cp ${f} $wd/index.js
cd $wd
zip ${n}.zip *.js
aws --region ${info.region} lambda update-function-code --function-name ${n} --zip-file fileb://./${n}.zip
cd -
rm -rf $wd;
`;
proc.execSync(script); //.on('exit', function(code, signal) {console.log(`${n} uploaded with status ${code}`)});
}

let debug = false;

function deploy(actions, timestamps, deployed)
{
	actions.map(info =>
		{
			const f = info.file;
			if (timestamps[f] > (f in deployed ? deployed[f] : -1))
			{
				switch(info.method)
				{
				case 'link':
					process.stdout.write(`link ${f}\n`);
					if (!fs.existsSync(f))
					{
						fs.symlinkSync(info.target, f);
						timestamps[f] = fs.statSync(f).mtime.getTime();
					}
					else
					{
						const stats = fs.lstatSync(f);
						if (!stats.isDirectory())
							throw `Error: file exists but is not a directory: ${f}`;
					}
					break;
				case 'mkdir':
					process.stdout.write(`mkdir ${f}\n`);
					if (!fs.existsSync(f))
					{
						fs.mkdirSync(f);
						timestamps[f] = fs.statSync(f).mtime.getTime();
					}
					else
					{
						const stats = fs.lstatSync(f);
						if (!stats.isDirectory())
							throw `Error: file exists but is not a directory: ${f}`;
					}
					break;
				case 'copyCat':
					process.stdout.write(`copyCat ${f}\n`);
//					const cmd = `scp -i ~/hdole-norcal.pem ${f} ec2-user@ec2-52-8-231-154.us-west-1.compute.amazonaws.com:/var/www/html/catecon/${info.target}`;
					const cmd = `scp -i ~/hdole-norcal.pem ${f} ec2-user@ec2-52-8-231-154.us-west-1.compute.amazonaws.com:/var/www/html/${info.target}`;
					if (debug)
						process.stdout.write(`${cmd}\n`);
					proc.execSync(cmd);
					break;
				case 'uploadLambda':
					process.stdout.write(`uploadLambda ${f}\n`);
					uploadLambda(info);
					break;
				default:
					process.stdout.write(`Error: action not understood: ${info.method}\n`);
					break;
				}
			}
			else if (debug)
				console.log('up to date', f);
		});
	fs.writeFileSync(tsFilename, JSON.stringify(timestamps), 'utf8');
}

fs.readFile(bldFilename, 'utf8', function bldReadFileCB(err, data)
{
	if (err)
	{
		console.log('Error: ', err);
		return;
	}
	const fileInfo = JSON.parse(data);
	const actions = fileInfo.actions;
	const timestamps = {};
	const files = actions.map(info => info.file).filter((f, i, a) => i === a.indexOf(f));
	//
	// get current timestamps
	//
	files.map(f => timestamps[f] = fs.existsSync(f) ? fs.statSync(f).mtime.getTime() : 0);
	//
	// get last deployment state
	//
	if (fs.existsSync(tsFilename))
		fs.readFile(tsFilename, 'utf8', function tsReadFileCB(err, data)
		{
			if (err)
			{
				console.log('Error: ', err);
				return;
			}
			const deployed = JSON.parse(data);
			deploy(actions, timestamps, deployed);
		});
	else
		deploy(actions, timestamps, {});
});
